{"searchDocs":[{"title":"Aliases","type":0,"sectionRef":"#","url":"/docs/cli-dsl-reference/keywords/aliases","content":"Aliases","keywords":"","version":"Next"},{"title":"Const","type":0,"sectionRef":"#","url":"/docs/cli-dsl-reference/keywords/const","content":"Const","keywords":"","version":"Next"},{"title":"Arg","type":0,"sectionRef":"#","url":"/docs/cli-dsl-reference/keywords/arg","content":"Arg","keywords":"","version":"Next"},{"title":"Action","type":0,"sectionRef":"#","url":"/docs/cli-dsl-reference/keywords/action","content":"Action","keywords":"","version":"Next"},{"title":"Children","type":0,"sectionRef":"#","url":"/docs/cli-dsl-reference/keywords/children","content":"Children","keywords":"","version":"Next"},{"title":"Documenting toolchains","type":0,"sectionRef":"#","url":"/docs/cli-dsl-reference/documenting-toolchains","content":"Documenting toolchains You can write documentation for your toolchain in the DSL. This will then show up when passing --help argument, or when the command fails Use @param &lt;param-name&gt; to set the description for a specific parameter hello-world { &quot;&quot;&quot; Does this very useful thing! @param location - Location from where are you hello-world-in'. @param dayOfWeek - Day of week when you are hello-world-in'. &quot;&quot;&quot; sub from(location: arg, dayOfWeek: arg) { action &lt;% echo Hello World from $(location) on this fine $(dayOfWeek) %&gt; } } info Documentation works on both root and sub toolchains","keywords":"","version":"Next"},{"title":"Cli DSL keywords","type":0,"sectionRef":"#","url":"/docs/cli-dsl-reference/keywords/overview","content":"Cli DSL keywords const true false flag arg action aliases children override default scope params","keywords":"","version":"Next"},{"title":"Comments","type":0,"sectionRef":"#","url":"/docs/cli-dsl-reference/comments","content":"Comments Single and multi-line comments are also supported. comments.cli hello-world { // &lt;- root toolchain, single line comment sub child { /* This Is a Child! */ } } ","keywords":"","version":"Next"},{"title":"Override default","type":0,"sectionRef":"#","url":"/docs/cli-dsl-reference/keywords/override-default","content":"Override default","keywords":"","version":"Next"},{"title":"Scope params","type":0,"sectionRef":"#","url":"/docs/cli-dsl-reference/keywords/scope-params","content":"Scope params","keywords":"","version":"Next"},{"title":"Flag","type":0,"sectionRef":"#","url":"/docs/cli-dsl-reference/keywords/flag","content":"Flag","keywords":"","version":"Next"},{"title":"Command template","type":0,"sectionRef":"#","url":"/docs/cli-dsl-reference/command-template","content":"Command template Command templates are used to map the input to any desired command. Mapping flags Can be done in two ways: Interpolating the string value of flags (i.e. false or true) into the command stringInterpolating or not, a predefined identifier based on the truthness of the flag hello-world(goodDay: flag) { sub foo { action &lt;% echo Hello World $(goodDay) %&gt; } sub bar { action &lt;% echo Hello World $(goodDay:today-is-a-good-day) %&gt; } sub baz { action &lt;% echo Hello World $(!goodDay:today-is-NOT-a-good-day) %&gt; } } When executing foo, the flag goodDay's value will just be interpolated into the string When executing bar, the flag will decide whether the string today-is-a-good-dayis interpolated, or not When executing baz, the effect will be the same as for bar, only the flag will be inverted $ hello-world foo Hello World false $ hello-world --goodDay foo Hello World true $ hello-world bar Hello World $ hello-world --goodDay bar Hello World today-is-a-good-day $ hello-world baz Hello World today-is-NOT-a-good-day $ hello-world --goodDay baz Hello World Mapping args Similar to flags, mapping args can be done in two ways: Interpolating the valueInterpolating with a key prefix hello-world(dayOfTheWeek: arg) { sub foo { action &lt;% echo Hello World $(dayOfTheWeek) %&gt; } sub bar { action &lt;% echo Hello World $(dayOfTheWeek:--today-is) %&gt; } } $ hello-world Tuesday foo Hello World Tuesday $ hello-world Tuesday bar Hello World --today-is=Tuesday ","keywords":"","version":"Next"},{"title":"Coming soon!","type":0,"sectionRef":"#","url":"/docs/coming-soon","content":"Coming soon!","keywords":"","version":"Next"},{"title":"Escape sequences","type":0,"sectionRef":"#","url":"/docs/cli-dsl-reference/escape-sequences","content":"Escape sequences Use backslash to escape certain characters. In a arg default value or a constant value surrounded by double quotes &quot;you can use prefix it with a backslash to escape it into the string. \\&quot; Same goes for action body closing markers. %&gt; is escaped like this: \\%&gt; escape-sequences.cli escape-sequences(arg-statement: arg? = &quot;Default arg values are surrounded by \\&quot;&quot;) { const const-statement = &quot;Constant values are surrounded by \\&quot;&quot; action &lt;% echo Action body is surrounded by &lt;% %\\%&gt; &amp;&amp; echo $(const-statement) &amp;&amp; echo $(arg-statement) %&gt; } ","keywords":"","version":"Next"},{"title":"Examples","type":0,"sectionRef":"#","url":"/docs/getting-started/examples","content":"Examples Coming soon!","keywords":"","version":"Next"},{"title":"JavaScript","type":0,"sectionRef":"#","url":"/docs/cli-dsl-reference/javascript","content":"JavaScript Besides executing commands in the default shell, you can execute JavaScript that runs on the same engine that CLiMAT runs. hello-world(location l: arg) { javascript action &lt;% console.log(&quot;Hello World from a JavaScript environment !&quot;); console.log(&quot;It seems that you are situated in&quot;, params.location); console.log(&quot;Is that correct?&quot;); %&gt; } $ hello-world Cluj-Napoca Hello World from a JavaScript environment ! It seems that you are situated in Cluj-Napoca Is that correct? Data in JS scope params. An object containing all the scope-visible paramstoolchain. An object containing metadata about the toolchain that the script was defined incommand. Information about the action","keywords":"","version":"Next"},{"title":"Constants","type":0,"sectionRef":"#","url":"/docs/cli-dsl-reference/constants","content":"Constants You can define constants for data that you want to use multiple times throughout your Toolchain. constants.cli my-toolchain { const my-const = &quot;My Dear Constant Value&quot; action &lt;% echo $(my-const) %&gt; } Console $ my-toolchain My Dear Constant Value Scope Constants are visible in both the defined scope and the child scopes. templates.cli my-toolchain { const my-const = &quot;My Dear Constant Value&quot; sub my-child { action &lt;% echo Child $(my-const) %&gt; } } Console $ my-toolchain my-child Child My Dear Constant Value Interpolation You can use interpolation when assigning a value to a constant. Reference other constants or even parameters. interpolation.cli my-toolchain { const my = &quot;My&quot; const dear = &quot;Dear&quot; const constant = &quot;Constant&quot; const value = &quot;Value&quot; const my-const = &quot;$(my) $(dear) $(constant) $(value)&quot; sub my-child { action &lt;% echo Child $(my-const) %&gt; } } Console $ my-toolchain my-child Child My Dear Constant Value ","keywords":"","version":"Next"},{"title":"Installation","type":0,"sectionRef":"#","url":"/docs/getting-started/installation","content":"","keywords":"","version":"Next"},{"title":"Prerequisitesâ€‹","type":1,"pageTitle":"Installation","url":"/docs/getting-started/installation#prerequisites","content":" NodeJS &gt;=13.2.0NPM or any JavaScript package manager (Yarn, pnpm)  Execute in the console:  npm i -g climat # if you use NPM # OR yarn global add climat # if you use Yarn # OR pnpm add -g climat # if you use pnpm   caution On Linux or other *NIX systems, you may need to run the installation command above as superuser (eg. sudo npm i -g climat)  Next, we are going to install and run your first toolchain ","version":"Next","tagName":"h2"},{"title":"Why CLiMAT?","type":0,"sectionRef":"#","url":"/docs/getting-started/why-climat","content":"Why CLiMAT? To answer that question, first, you need to head to","keywords":"","version":"Next"},{"title":"Cli DSL","type":0,"sectionRef":"#","url":"/docs/cli-dsl-reference/overview","content":"Cli DSL Cli DSL (Domain-specific language) is the language used by CLiMAT to generate toolchains. The syntax is meant to be tailored to the very problem CLiMAT is trying to solve, which is writing flexible CLI interfaces.","keywords":"","version":"Next"},{"title":"Toolchain","type":0,"sectionRef":"#","url":"/docs/cli-dsl-reference/toolchain","content":"Toolchain A Toolchain is a CLI tool that has many functionalities and which is written in Cli DSL. We call it like that because often we aggregate different CLI tools under a single toolchain Below we have a commented simple snippet of a toolchain writing &quot;Hello&quot; when called: toolchain.cli my-toolchain { // &lt;- Root toolchain // The name of the root toolchain will // define the name of the executable CLI action &lt;% echo Hello %&gt; // &lt;- The action to execute when the // toolchain is invoked } After installing the script, CLiMAT will create a binary called &quot;my-toolchain&quot; that we can invoke from the console Console $ my-toolchain Hello ","keywords":"","version":"Next"},{"title":"Your first toolchain","type":0,"sectionRef":"#","url":"/docs/getting-started/your-first-toolchain","content":"Your first toolchain Let's write a &quot;hello world&quot; toolchain. Start with creating a file named hello-world.cli hello-world(location l: arg) { action &lt;% echo Hello World from $(location) %&gt; } Install this via Console $ climat install hello-world.cli caution On Linux or other *NIX systems, you might need to run the installation command from above as super user (eg. sudo climat install hello-world.cli) On Windows systems, it might be necessary to add certain directory to system PATH. Follow the installation warnings for more information Your first toolchain is ready to use: $ hello-world Cluj-Napoca Hello World from Cluj-Napoca Now, the sky is the only limit! Check out the Cli DSL reference to see what you can build with CLiMAT!","keywords":"","version":"Next"},{"title":"Parameters","type":0,"sectionRef":"#","url":"/docs/cli-dsl-reference/parameters","content":"Parameters Parameters are defined with a function header like syntax. Let's take a look at the &quot;Hello World&quot; example from here. hello-world(location l: arg) { action &lt;% echo Hello World from $(location) %&gt; } As you can see, our root toolchain supports a parameter, location that you can then reference in your action templates and even constants. We also defined a shorthand, l for our parameter. Declare more than one parameter by separating them with a comma (,) Types Currently, 2 types are supported: arg - a normal string valueflag - a boolean value that is set to true if passed and set to false if omitted Scope The params that you define for a toolchain can be referenced in any descendant toolchain. scope.cli hello-world(location l: arg) { action &lt;% echo Hello World from $(location) %&gt; sub child { action &lt;% echo Hello Child from $(location) %&gt; } } $ hello-world Cluj-Napoca Hello World from Cluj-Napoca $ hello-world Cluj-Napoca child Hello Child from Cluj-Napoca Optionals Optional arguments will not be mandatory when the toolchain is executed. If a value is not passed for an optional, it will default to empty string in case of an argFlags are optional by default and their default value is false They are marked with the question mark (?) character at the end of their name. When a parameter is optional, it is no longer passed in as a positional argument. You will need to specify its name before the value. optionals.cli hello-world(location l: arg?) { action &lt;% echo Hello World from $(location) %&gt; } $ hello-world Hello World from $ hello-world --location Cluj-Napoca Hello World from Cluj-Napoca Defaults Defaults are only supported for optional params. defaults.cli hello-world(location l: arg? = &quot;the other side&quot;) { action &lt;% echo Hello World from $(location) %&gt; } $ hello-world Hello World from the other side $ hello-world -l Cluj-Napoca Hello World from Cluj-Napoca ","keywords":"","version":"Next"},{"title":"Subcommands","type":0,"sectionRef":"#","url":"/docs/cli-dsl-reference/subcommands","content":"Subcommands In a Toolchain, you can have as many nested subcommands as you want. Let's take the example from earlier and add a subcommand to it: toolchain.cli my-toolchain { action &lt;% echo 'Hello' %&gt; sub child-toolchain { // &lt;- Child name action &lt;% echo Child %&gt; // &lt;- Child action } } After reinstalling the script, we can do the following: Console $ my-toolchain Hello $ my-toolchain child-toolchain Child Aliases Sometimes you want one than more name for your subcommand. For example, the user may want to execute install with a shorthand (like npm supports i for install, eg npm i climat) To achieve that, you can use the sub modifiers @aliases and @alias: my-toolchain { @aliases(ct child) // Defines one or more aliases @alias(cld) // Defines one alias sub child-toolchain { action &lt;% echo Child %&gt; } } After reinstalling the script, we can do the following: $ my-toolchain child-toolchain Child $ my-toolchain child Child $ my-toolchain ct Child $ my-toolchain cld Child ","keywords":"","version":"Next"},{"title":"Introduction","type":0,"sectionRef":"#","url":"/docs/getting-started/introduction","content":"","keywords":"","version":"Next"},{"title":"Exampleâ€‹","type":1,"pageTitle":"Introduction","url":"/docs/getting-started/introduction#example","content":" Here is a brief example of what CLiMAT can do:  sgit.cli sgit { sub acp(amend a: flag) { action &lt;% git add . &amp;&amp; git commit $(amend:--amend) &amp;&amp; git push $(amend:--force) %&gt; } sub cf(branch: arg, force f: flag) { action &lt;% git checkout feature/$(branch) $(force:--force) %&gt; } }   This simple script will create a toolchain (a CLI tool that has many capabilities) named sgit with 2 subcommands:  acp which will execute git add, git commit and git push. Takes an optional parameter amend which will be passed on to the git commit as an --amend flag, and to the git push as the --force flag.cf which will execute git checkout, but the passed-in branch is always prefixed with feature/.  The generated tool can be used like this  sgit acpsgit acp --amendsgit acp -asgit cf myFeature  This is it. Now you have a git macro that you can customize and tailor to your needs.  info CLiMAT uses a special DSL (Domain-specific language) for its scripts that has many more capabilities than what is showcased in the above example. Learn more here.  Next, we're going to explore how to generate your first toolchain ","version":"Next","tagName":"h3"},{"title":"Troubleshooting","type":0,"sectionRef":"#","url":"/docs/getting-started/troubleshooting","content":"Troubleshooting If you want to see in more detail what is happening with your toolchain, you can set the log level to DEBUG Use the CLIMAT_LOG_LEVEL environment variable and set it to DEBUG: $ CLIMAT_LOG_LEVEL=DEBUG hello-world Cluj-Napoca 3/3 12:05:06.408 D/ToolchainProcessor: Processing toolchain: &lt;climat&gt; 3/3 12:05:06.409 D/RefProcessor: Processing refs of toolchain &lt;climat&gt; 3/3 12:05:06.409 D/RefProcessor: Trying to parse the required params from [runGlobal, hello-world, Cluj-Napoca] 3/3 12:05:06.410 D/RefProcessor: Successfully resolved values for params &lt;[]&gt; 3/3 12:05:06.410 D/RefProcessor: Trying to parse the optional params from [runGlobal, hello-world, Cluj-Napoca] 3/3 12:05:06.410 D/RefProcessor: Successfully parsed optional params. Unset params &lt;[version]&gt; 3/3 12:05:06.410 D/RefProcessor: Processing unmatched parameters 3/3 12:05:06.411 D/RefProcessor: Set default values for params: &lt;[version]&gt; 3/3 12:05:06.411 D/RefProcessor: Resolving constants 3/3 12:05:06.411 D/RefProcessor: No resolved constants 3/3 12:05:06.411 D/ToolchainProcessor: Processing toolchain: &lt;runGlobal&gt; 3/3 12:05:06.411 D/RefProcessor: Processing refs of toolchain &lt;runGlobal&gt; 3/3 12:05:06.412 D/RefProcessor: Trying to parse the required params from [hello-world, Cluj-Napoca] 3/3 12:05:06.412 D/RefProcessor: Successfully resolved values for params &lt;[name]&gt; 3/3 12:05:06.412 D/RefProcessor: Trying to parse the optional params from [Cluj-Napoca] 3/3 12:05:06.412 D/RefProcessor: Successfully parsed optional params. Unset params &lt;[shellPath]&gt; 3/3 12:05:06.412 D/RefProcessor: Processing unmatched parameters 3/3 12:05:06.412 D/RefProcessor: Unmatched parameters: [Cluj-Napoca] 3/3 12:05:06.413 D/RefProcessor: Set default values for params: &lt;[shellPath]&gt; 3/3 12:05:06.413 D/RefProcessor: Resolving constants 3/3 12:05:06.413 D/RefProcessor: No resolved constants 3/3 12:05:06.413 D/ToolchainProcessor: Matched &lt;runGlobal&gt; 3/3 12:05:06.413 D/ToolchainProcessor: Handling action.. 3/3 12:05:06.415 D/ToolchainProcessor: Execution summary Chain: climat -&gt; runGlobal 3/3 12:05:06.419 D/ToolchainProcessor: Processing toolchain: &lt;hello-world&gt; 3/3 12:05:06.419 D/RefProcessor: Processing refs of toolchain &lt;hello-world&gt; 3/3 12:05:06.419 D/RefProcessor: Trying to parse the required params from [Cluj-Napoca] 3/3 12:05:06.419 D/RefProcessor: Successfully resolved values for params &lt;[location]&gt; 3/3 12:05:06.420 D/RefProcessor: No optional parameters to parse 3/3 12:05:06.420 D/RefProcessor: Processing unmatched parameters 3/3 12:05:06.420 D/RefProcessor: Resolving constants 3/3 12:05:06.420 D/RefProcessor: No resolved constants 3/3 12:05:06.420 D/ToolchainProcessor: Matched &lt;hello-world&gt; 3/3 12:05:06.420 D/Interpolation: No mapping found for location, therefore interpolating bare value &lt;Cluj-Napoca&gt; 3/3 12:05:06.421 D/ToolchainProcessor: Handling action.. Hello World from Cluj-Napoca 3/3 12:05:06.423 D/ToolchainProcessor: Execution summary Chain: hello-world ","keywords":"","version":"Next"}],"options":{"id":"default"}}